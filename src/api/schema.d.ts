/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign in */
        post: operations["signin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign in */
        post: operations["signin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign up */
        post: operations["signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign up */
        post: operations["signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restore */
        post: operations["restore"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restore */
        post: operations["restore"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/restore/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm restore */
        post: operations["restore-confirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/restore/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm restore */
        post: operations["restore-confirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/email/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Confirm email */
        get: operations["confirm-email"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/email/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Confirm email */
        get: operations["confirm-email"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/github/url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Github OAuth URL */
        get: operations["github"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/oauth/github/url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Github OAuth URL */
        get: operations["github"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/github/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Github auth */
        post: operations["github-auth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/oauth/github/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Github auth */
        post: operations["github-auth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/google/url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Google OAuth URL */
        get: operations["google"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/oauth/google/url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Google OAuth URL */
        get: operations["google"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/google/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Google auth */
        post: operations["google-auth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/oauth/google/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Google auth */
        post: operations["google-auth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/squids/deploy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deploy a squid to organization */
        post: operations["deploy-squid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/squids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List organization squids */
        get: operations["list-squids"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/squids/{squid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all squid versions */
        get: operations["get-squid"];
        put?: never;
        post?: never;
        /** Delete all squid versions by name */
        delete: operations["delete-squid"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/squids/{squid}/version/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a squid */
        delete: operations["destroy-squid-version"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/squids/{squid}/version/{version}/redeploy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Restart a squid */
        put: operations["restart-squid-version"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/squids/{squid}/version/{version}/hibernate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Hibernate a squid */
        post: operations["hibernate-squid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/squids/metrics/ingress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all requests count */
        get: operations["daily-requests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/squids/metrics/ingress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all requests count */
        get: operations["daily-requests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/squids/metrics/ingress/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get full squid ingress metrics */
        get: operations["ingress-stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/squids/metrics/ingress/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get full squid ingress metrics */
        get: operations["ingress-stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/squids/metrics/usage/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get squid usage metrics */
        get: operations["usage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/squids/metrics/usage/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get squid usage metrics */
        get: operations["usage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/squids/{squidName}/versions/{versionName}/logs/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get squid logs history */
        get: operations["fetch-logs-history"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/squids/{squidName}/versions/{versionName}/logs/follow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Follow the squid logs */
        get: operations["tail-logs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/squids/{squid}/versions/{version}/prod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set alias to a squid */
        put: operations["squid"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/deploys/upload-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get an upload url */
        post: operations["upload-url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/deploys/upload-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get an upload url */
        post: operations["upload-url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/deploys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version deploys */
        get: operations["get-all"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/deploys/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a deploy */
        get: operations["get-one"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/deploys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version deploys */
        get: operations["get-all"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/deploys/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a deploy */
        get: operations["get-one"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{org}/squids/deploy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deploy a squid to organization */
        post: operations["deploy-squid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{org}/squids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List organization squids */
        get: operations["list-squids"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{org}/squids/{squid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List organization squids */
        get: operations["list-squids"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{org}/squids/{squid}/slots/{slot}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a squid deployment */
        get: operations["get-squid"];
        put?: never;
        post?: never;
        /** Delete a squid deployment */
        delete: operations["delete-squid"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{org}/squids/{squid}/slots/{slot}/restart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restart a squid */
        post: operations["restart-squid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{org}/squids/{squid}/slots/{slot}/hibernate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Hibernate a squid deployment */
        post: operations["hibernate-squid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{org}/squids/{squid}/slots/{slot}/tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set tag to a squid deployment */
        post: operations["tag-squid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/squids/{squid}/slots/{slot}/logs/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get squid logs history */
        get: operations["fetch-logs-history"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/squids/{squid}/slots/{slot}/logs/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get squid logs history */
        get: operations["fetch-logs-history"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/squids/{squid}/slots/{slot}/logs/follow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Follow the squid logs */
        get: operations["tail-logs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/squids/{squid}/slots/{slot}/logs/follow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Follow the squid logs */
        get: operations["tail-logs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a user */
        get: operations["get-profile"];
        /** Update a user */
        put: operations["update-profile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a user */
        get: operations["get-profile"];
        /** Update a user */
        put: operations["update-profile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/onboarding": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Apply user onboarding */
        put: operations["on-boarding-form"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/onboarding": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Apply user onboarding */
        put: operations["on-boarding-form"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/password/change": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Change password */
        post: operations["change-password"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/password/change": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Change password */
        post: operations["change-password"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/coinlist/email/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resend Coinlist email confirmation */
        post: operations["resend-coinlist-email-confirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/coinlist/email/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resend Coinlist email confirmation */
        post: operations["resend-coinlist-email-confirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/email/confirm/resend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resend email confirmation */
        post: operations["resend-email-confirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/email/confirm/resend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resend email confirmation */
        post: operations["resend-email-confirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/sqd-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh sqd access key */
        post: operations["key"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/sqd-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh sqd access key */
        post: operations["key"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve all invites */
        get: operations["get-invites"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve all invites */
        get: operations["get-invites"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/squids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of squids from all users organizations */
        get: operations["get-squids-v-0"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/squids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of squids from all users organizations */
        get: operations["get-squids-v-1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of user tokens */
        get: operations["get-tokens"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of user tokens */
        get: operations["get-tokens"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/api-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get tokens list */
        get: operations["get-tokens"];
        put?: never;
        /** Create new token */
        post: operations["create-token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/api-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get tokens list */
        get: operations["get-tokens"];
        put?: never;
        /** Create new token */
        post: operations["create-token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/api-tokens/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete token */
        delete: operations["deactivate-token"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/api-tokens/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete token */
        delete: operations["deactivate-token"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all organizations */
        get: operations["list-organizations"];
        put?: never;
        /** Create new organization */
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all organizations */
        get: operations["list-organizations"];
        put?: never;
        /** Create new organization */
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all organizations */
        get: operations["list-organizations"];
        put?: never;
        /** Create new organization */
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all organizations */
        get: operations["list-organizations"];
        put?: never;
        /** Create new organization */
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{org}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an organizations */
        get: operations["get-organization"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an organizations */
        get: operations["get-organization"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/{org}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an organizations */
        get: operations["get-organization"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{org}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an organizations */
        get: operations["get-organization"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit an organization */
        put: operations["edit"];
        post?: never;
        /** Delete an organization */
        delete: operations["delete-one"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit an organization */
        put: operations["edit"];
        post?: never;
        /** Delete an organization */
        delete: operations["delete-one"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit an organization */
        put: operations["edit"];
        post?: never;
        /** Delete an organization */
        delete: operations["delete-one"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit an organization */
        put: operations["edit"];
        post?: never;
        /** Delete an organization */
        delete: operations["delete-one"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{code}/send-verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send verification email */
        post: operations["send-email-verification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/send-verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send verification email */
        post: operations["send-email-verification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/{code}/send-verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send verification email */
        post: operations["send-email-verification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/send-verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send verification email */
        post: operations["send-email-verification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Verify organization email by token */
        get: operations["verify-email"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Verify organization email by token */
        get: operations["verify-email"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Verify organization email by token */
        get: operations["verify-email"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Verify organization email by token */
        get: operations["verify-email"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{code}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user roles */
        get: operations["get-one"];
        put?: never;
        /** Add user role */
        post: operations["add-user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user roles */
        get: operations["get-one"];
        put?: never;
        /** Add user role */
        post: operations["add-user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/{code}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user roles */
        get: operations["get-one"];
        put?: never;
        /** Add user role */
        post: operations["add-user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user roles */
        get: operations["get-one"];
        put?: never;
        /** Add user role */
        post: operations["add-user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{code}/roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit user role */
        put: operations["edit-user"];
        post?: never;
        /** Remove user role */
        delete: operations["delete-user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit user role */
        put: operations["edit-user"];
        post?: never;
        /** Remove user role */
        delete: operations["delete-user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/{code}/roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit user role */
        put: operations["edit-user"];
        post?: never;
        /** Remove user role */
        delete: operations["delete-user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit user role */
        put: operations["edit-user"];
        post?: never;
        /** Remove user role */
        delete: operations["delete-user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{code}/roles/{id}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accept user role */
        post: operations["accept-user-role"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/roles/{id}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accept user role */
        post: operations["accept-user-role"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/{code}/roles/{id}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accept user role */
        post: operations["accept-user-role"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/roles/{id}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accept user role */
        post: operations["accept-user-role"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{code}/roles/{id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reject user role */
        post: operations["decline-user-role"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/roles/{id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reject user role */
        post: operations["decline-user-role"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizations/{code}/roles/{id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reject user role */
        post: operations["decline-user-role"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/roles/{id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reject user role */
        post: operations["decline-user-role"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/billing/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get billing settings */
        get: operations["get-settings"];
        /** Update billing settings */
        put: operations["setup-intent"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/billing/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get billing settings */
        get: operations["get-settings"];
        /** Update billing settings */
        put: operations["setup-intent"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/billing/receipts/{year}/{month}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get billing month usage total */
        get: operations["get-monthly"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/billing/receipts/{year}/{month}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get billing month usage total */
        get: operations["get-monthly"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List secrets */
        get: operations["list-secrets"];
        /** Update secrets */
        put: operations["put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List secrets */
        get: operations["list-secrets"];
        /** Update secrets */
        put: operations["put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rpc/{code}/chains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List chains */
        get: operations["list-chains"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/rpc/{code}/chains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List chains */
        get: operations["list-chains"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rpc/{code}/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get organization token */
        get: operations["get-token"];
        put?: never;
        /** Refresh organization token */
        post: operations["refresh-token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/rpc/{code}/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get organization token */
        get: operations["get-token"];
        put?: never;
        /** Refresh organization token */
        post: operations["refresh-token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quotas/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get quotas */
        get: operations["get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/quotas/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get quotas */
        get: operations["get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/monitoring/squids/{query}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get squids metric */
        get: operations["squids"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/monitoring/squids/{query}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get squids metric */
        get: operations["squids"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{code}/monitoring/squids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Scrape metrics */
        get: operations["squids-all-prom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/monitoring/squids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Scrape metrics */
        get: operations["squids-all-prom"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AuthResponse: {
            /** @example  */
            token: string;
        };
        ResetPasswordResponse: {
            /** @example true */
            success: boolean;
        };
        UnauthorizedResponse: {
            /** @example CREDENTIALS_INVALID */
            error: string;
        };
        DeployLog: {
            severity: string;
            message: string;
        };
        DeployUserResponse: {
            /** @example 90046784-ef9a-42b4-9dcf-ca4e4ed2cf4a */
            id: string;
            /** @example user@gmail.com */
            email: string;
            /** @example John Doe */
            fullName: string;
        };
        DeployResponseV0: {
            id: number;
            /** @enum {string} */
            type: DeployResponseV0Type;
            /** @enum {string} */
            status: DeployResponseV0Status;
            /** @enum {string} */
            failed: DeployResponseV0Failed;
            logs: components["schemas"]["DeployLog"][];
            squidName: string;
            versionName: string;
            orgCode: string;
            deploymentUrl: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            createdAt: string;
            user: components["schemas"]["DeployUserResponse"];
        };
        SquidOrganizationResponseV0: {
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            id: string;
            /** @example Subsquid GmbH */
            name: string;
            /** @example subsquid-org */
            code: string;
        };
        SquidApiResponseV0: {
            /** @example https://squid.subsquid.io/mysquid/graphql */
            url: string;
            /** @enum {string} */
            status: SquidApiResponseV0Status;
        };
        SquidSyncStatusResponse: {
            /** @example 1 */
            totalBlocks: number;
            /** @example 1 */
            currentBlock: number;
        };
        SquidProcessorResponseV0: {
            /** @example processor */
            name: string;
            /** @enum {string} */
            status: SquidProcessorResponseV0Status;
            syncState: components["schemas"]["SquidSyncStatusResponse"];
        };
        SquidDBResponseV0: Record<string, unknown>;
        SquidAddonsHasuraResponseV0: {
            replicas: number;
            profile: string;
        };
        SquidDiskResponseV0: {
            /** @enum {string} */
            usageStatus: SquidDiskResponseV0UsageStatus;
            usedBytes: number;
            totalBytes: number;
        };
        SquidAddonsPostgresResponseV0: {
            connections: string[];
            disk: components["schemas"]["SquidDiskResponseV0"];
        };
        SquidAddonsNeonResponseV0: {
            connections: string[];
        };
        SquidAddonsResponseV0: {
            hasura?: components["schemas"]["SquidAddonsHasuraResponseV0"];
            postgres?: components["schemas"]["SquidAddonsPostgresResponseV0"];
            neon?: components["schemas"]["SquidAddonsNeonResponseV0"];
        };
        SquidLastDeployV0: {
            /** @example 123 */
            id: number;
            /**
             * @example DEPLOY
             * @enum {string}
             */
            type: SquidLastDeployV0Type;
            /**
             * @example UNPACKING
             * @enum {string}
             */
            status: SquidLastDeployV0Status;
            /**
             * @example NO
             * @enum {string}
             */
            failed: SquidLastDeployV0Failed;
            /** @example true */
            running: boolean;
        };
        SquidRunningDeployV0: {
            /** @example 123 */
            id: number;
            /**
             * @example DELETE
             * @enum {string}
             */
            type: SquidRunningDeployV0Type;
        };
        VersionResponseV0: {
            id: number;
            name: string;
            version: string;
            description?: Record<string, unknown>;
            tags: string[];
            imageUrl?: string;
            aliases: string[];
            urls: string[];
            /** @description The unmodified squid manifest */
            manifestYaml?: Record<string, unknown>;
            /** @description The package.json found in source code */
            packageJson: Record<string, unknown>;
            /** @example {
             *       "default for v1": "query { ... }",
             *       "another query label": "query { ... }"
             *     } */
            queries: Record<string, unknown>;
            artifactUrl: string;
            api: components["schemas"]["SquidApiResponseV0"];
            processors: components["schemas"]["SquidProcessorResponseV0"][];
            db?: components["schemas"]["SquidDBResponseV0"];
            addons?: components["schemas"]["SquidAddonsResponseV0"];
            spec: string;
            /** Format: date-time */
            createdAt: string;
            lastDeploy?: components["schemas"]["SquidLastDeployV0"] | null;
            /** @enum {string|null} */
            status?: VersionResponseV0Status;
            /**
             * @deprecated
             * @description Use `lastDeploy` fields instead.
             */
            runningDeploy?: components["schemas"]["SquidRunningDeployV0"] | null;
            /**
             * @deprecated
             * @description Use `status` fields instead.
             */
            deploy: Record<string, unknown>;
            deployCount: number;
            deployedAt?: Record<string, unknown>;
            hibernatedAt?: Record<string, unknown>;
            /** @deprecated */
            manifest?: Record<string, unknown>;
            /** @deprecated */
            deploymentUrl?: string;
        };
        SquidResponseV0: {
            /** @example 1 */
            id: number;
            /** @example my-squid */
            name: string;
            organization: components["schemas"]["SquidOrganizationResponseV0"];
            versions: components["schemas"]["VersionResponseV0"][];
        };
        IngressRequestsMetric: {
            /** Format: date-time */
            time: string;
            squidId: number;
            /** @enum {string} */
            res: IngressRequestsMetricRes;
        };
        IngressSquidLatency: {
            p50: number;
            p90: number;
            p95: number;
            p99: number;
        };
        IngressSquidRequestsStat: {
            count: string;
            bytesSend: string;
            latency: components["schemas"]["IngressSquidLatency"];
        };
        IngressSquidRequestsMetricValue: {
            /** Format: date-time */
            ts: string;
            success: components["schemas"]["IngressSquidRequestsStat"];
            error: components["schemas"]["IngressSquidRequestsStat"];
        };
        IngressSquidRequestsMetric: {
            /** @enum {string} */
            timeGroup: IngressSquidRequestsMetricTimeGroup;
            metrics: components["schemas"]["IngressSquidRequestsMetricValue"][];
        };
        SquidUsageMetricValue: {
            /** Format: date-time */
            ts: string;
            apiCpuUsage: number;
            apiCpuRequested: number;
            apiMemUsageMb: number;
            apiMemRequestedMb: number;
            processorCpuUsage: number;
            processorCpuRequested: number;
            processorMemUsageMb: number;
            processorMemRequestedMb: number;
            dbCpuUsage: number;
            dbCpuRequested: number;
            dbDiskUsageMb: number;
            dbDiskRequestedMb: number;
        };
        SquidUsageMetric: {
            /** @enum {string} */
            timeGroup: SquidUsageMetricTimeGroup;
            metrics: components["schemas"]["SquidUsageMetricValue"][];
        };
        SquidHistoryLogsResponse: {
            logs: string[];
            nextPage: Record<string, unknown>;
        };
        UploadUrlResponse: {
            uploadUrl: string;
            uploadFields: Record<string, unknown>;
            fileUrl: string;
            maxUploadBytes: number;
        };
        DeployOrganizationResponse: {
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            id: string;
            /** @example Subsquid GmbH */
            name: string;
            /** @example subsquid-org */
            code: string;
        };
        DeploySquidResponse: {
            /** @example 1 */
            id: number;
            /** @example my-squid */
            name: string;
            /** @example abc12 */
            slot: string;
        };
        DeployResponse: {
            id: number;
            /** @enum {string} */
            type: DeployResponseType;
            /** @enum {string} */
            status: DeployResponseStatus;
            /** @enum {string} */
            failed: DeployResponseFailed;
            logs: components["schemas"]["DeployLog"][];
            organization: components["schemas"]["DeployOrganizationResponse"];
            deploymentUrl: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            createdAt: string;
            user: components["schemas"]["DeployUserResponse"] | null;
            squid: components["schemas"]["DeploySquidResponse"] | null;
        };
        SquidTagResponse: {
            name: string;
        };
        SquidUrlResponse: {
            /** @example api */
            component: string;
            /** @example canonical */
            type: string;
            /** @example https://squid.subsquid.io/mysquid/graphql */
            url: string;
        };
        SquidApiResponse: {
            /** @example https://squid.subsquid.io/mysquid/graphql */
            url: string;
            /** @enum {string} */
            status: SquidApiResponseStatus;
        };
        SquidProcessorResponse: {
            /** @example processor */
            name: string;
            /** @enum {string} */
            status: SquidProcessorResponseStatus;
            syncState: components["schemas"]["SquidSyncStatusResponse"];
        };
        SquidAddonsHasuraResponse: {
            replicas: number;
            profile: string;
        };
        PostgresConnectionParams: {
            /** @example pg.sqd.dev */
            host: string;
            /** @example owner */
            user: string;
            /** @example dbname */
            database: string;
            /** @example random_password */
            password: string;
        };
        PostgresConnection: {
            /** @example postgresql://user:password@host/db?sslmode=require */
            uri: string;
            params: components["schemas"]["PostgresConnectionParams"];
        };
        SquidDiskResponse: {
            /** @enum {string} */
            usageStatus: SquidDiskResponseUsageStatus;
            usedBytes: number;
            totalBytes: number;
        };
        SquidAddonsPostgresResponse: {
            connections: components["schemas"]["PostgresConnection"][];
            disk: components["schemas"]["SquidDiskResponse"];
        };
        SquidAddonsNeonResponse: {
            connections: components["schemas"]["PostgresConnection"][];
        };
        SquidAddonsResponse: {
            hasura?: components["schemas"]["SquidAddonsHasuraResponse"];
            postgres?: components["schemas"]["SquidAddonsPostgresResponse"];
            neon?: components["schemas"]["SquidAddonsNeonResponse"];
        };
        SquidLastDeploy: {
            /** @example 123 */
            id: number;
            /**
             * @example DEPLOY
             * @enum {string}
             */
            type: SquidLastDeployType;
            /**
             * @example UNPACKING
             * @enum {string}
             */
            status: SquidLastDeployStatus;
            /**
             * @example NO
             * @enum {string}
             */
            failed: SquidLastDeployFailed;
            /** @example true */
            running: boolean;
        };
        SquidOrganizationResponse: {
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            id: string;
            /** @example Subsquid GmbH */
            name: string;
            /** @example subsquid-org */
            code: string;
        };
        SquidResponse: {
            id: number;
            name: string;
            slot: string;
            description?: Record<string, unknown>;
            imageUrl?: string;
            tags: components["schemas"]["SquidTagResponse"][];
            urls: components["schemas"]["SquidUrlResponse"][];
            /** @description The unmodified squid manifest */
            manifestYaml?: Record<string, unknown>;
            /** @description The package.json found in source code */
            packageJson: Record<string, unknown>;
            artifactUrl: string;
            api?: components["schemas"]["SquidApiResponse"];
            processors?: components["schemas"]["SquidProcessorResponse"][];
            addons?: components["schemas"]["SquidAddonsResponse"];
            spec: string;
            /** Format: date-time */
            createdAt: string;
            lastDeploy?: components["schemas"]["SquidLastDeploy"];
            /** @enum {string} */
            status?: SquidResponseStatus;
            deployCount: number;
            /** Format: date-time */
            deployedAt?: string;
            /** Format: date-time */
            hibernatedAt?: string;
            organization: components["schemas"]["SquidOrganizationResponse"];
        };
        EmailResponse: {
            /** @example user@gmail.com */
            current: string;
            /** @example user_new@gmail.com */
            pendingVerification: string;
        };
        UserResponse: {
            /** @example 90046784-ef9a-42b4-9dcf-ca4e4ed2cf4a */
            id: string;
            /** @example user@gmail.com */
            email: string;
            /** @example user@gmail.com */
            coinlistEmail: components["schemas"]["EmailResponse"];
            /** @example John Doe */
            fullName: string;
            /** @example user */
            username: string;
            /** @example https://gravatar.com/1.jpg */
            avatarUrl: string;
            /** @example {
             *       "occupation": "Backend developer",
             *       "source": "Twitter",
             *       "customSource": "",
             *       "usage": "DeFi",
             *       "customUsage": ""
             *     } */
            onboardingForm: Record<string, unknown>;
            /** @example true */
            policyAccepted: boolean;
            /** @example false */
            onboardingFormCompleted: boolean;
            /** @example false */
            emailVerified: boolean;
            organizations?: string[];
            /** @example false */
            wallet: Record<string, unknown>;
            /** @example false */
            social: Record<string, unknown>;
        };
        KeyResponse: {
            key: string;
        };
        UserInviteProjectResponse: {
            /** @example new-project */
            code: string;
            /** @example New project */
            name: string;
        };
        UserInviteResponse: {
            /** @example 90046784-ef9a-42b4-9dcf-ca4e4ed2cf4a */
            id: string;
            /** @example admin@subsquid.io */
            invitedBy: string;
            organization: components["schemas"]["UserInviteProjectResponse"];
        };
        UserTokenResponse: {
            /** @example my-token */
            name: string;
        };
        ApiTokenResponse: {
            /** @example 50e8400-e29b-41d4-a716-446655440000 */
            id: string;
            /** @example my-token */
            name: string;
            /**
             * Format: date-time
             * @example 2024-01-01T11:00:00.000Z
             */
            createdAt: string;
            /** @example 2039-12-31T11:00:00.000Z */
            expiresAt: Record<string, unknown>;
        };
        NotificationEmailResponse: {
            /** @example current@example.com */
            email: string;
            /** @example new@example.com */
            pendingEmail: string;
        };
        OrganizationLimitsResponse: {
            /** @example 3 */
            squids: number;
            /** @example false */
            playground: boolean;
        };
        OrganizationBillingsDetails: {
            /** @example John Doe */
            name: string;
            /** @example Subsquid */
            company: string;
            /** @example billing@subsquid.io */
            email: string;
            /** @example Mythenquai 2 */
            addressLine1: string;
            /** @example Zurich */
            city: string;
            /** @example 10004 */
            zipCode: string;
        };
        OrganizationResponse: {
            /** @example org_DI4wZx0FAJa93tq3iNr1wc7H */
            id: string;
            /** @example organization_unique_code */
            code: string;
            /** @example My first organization */
            name: string;
            email: components["schemas"]["NotificationEmailResponse"];
            /** @example admin */
            roleType: string;
            /**
             * @example ACTIVE
             * @enum {string}
             */
            status: OrganizationResponseStatus;
            limits: components["schemas"]["OrganizationLimitsResponse"];
            billingDetails: components["schemas"]["OrganizationBillingsDetails"];
        };
        OrganizationRoleResponse: {
            /** @example 88a02891-c461-4c1b-b705-13c8e6fdf7c0 */
            id: string;
            /** @example test@gmail.com */
            email: string;
            /** @example John Doe */
            fullName: string;
            /** @example admin */
            type: string;
            /**
             * @example accepted
             * @enum {string}
             */
            status: OrganizationRoleResponseStatus;
        };
        SecretsResponse: {
            /** @example {
             *       "MY_SECRET": "VALUE"
             *     } */
            secrets: Record<string, unknown>;
        };
        ChainResponse: {
            /** @example eth */
            id: string;
            /** @example Ethereum */
            title: string;
            /** @example https://cdn.subsquid.io/images/eth.svg */
            iconUrl: string;
            /** @enum {string} */
            type: ChainResponseType;
            /** @example 100000000 */
            requests: string;
            /** @example false */
            testnet: boolean;
            /** @example https://rpc.subsquid.io/eth/{{TOKEN}} */
            url: string;
        };
        TokenResponse: {
            /** @example sqd_prod_g9FsTC9NXkIPLsIJPZq0 */
            token: string;
        };
        QuotaResponse: {
            /** @enum {string} */
            id: QuotaResponseId;
            /** @example 1.00 */
            usage: string;
            /** @example 100.00 */
            capacity: string;
        };
        MetricLabelResponse: {
            container: string;
            squid_id: string;
            squid_name: string;
        };
        MetricResponse: {
            labels: components["schemas"]["MetricLabelResponse"];
            values: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    signin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                    password: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["AuthResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    signin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                    password: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["AuthResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    signup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    fullName: string;
                    email: string;
                    password: string;
                    subscribeToNewsletter?: boolean;
                    turnstileToken: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["AuthResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    signup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    fullName: string;
                    email: string;
                    password: string;
                    subscribeToNewsletter?: boolean;
                    turnstileToken: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["AuthResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    restore: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                };
            };
        };
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    restore: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                };
            };
        };
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    "restore-confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    token: string;
                    password: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["ResetPasswordResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    "restore-confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    token: string;
                    password: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["ResetPasswordResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    "confirm-email": {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "confirm-email": {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    github: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    github: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "github-auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    code: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["AuthResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    "github-auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    code: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["AuthResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    google: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    google: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "google-auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    code: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["AuthResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    "google-auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    code: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["AuthResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    "deploy-squid": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    hardReset?: boolean;
                    artifactUrl: string;
                    /** @default squid.yaml */
                    manifestPath?: string;
                    updateSlot?: string;
                    tag?: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeployResponseV0"][];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "list-squids": {
        parameters: {
            query?: {
                search?: string;
                organization?: string;
            };
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidResponseV0"][];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-squid": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                squid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidResponseV0"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "delete-squid": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                squid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidResponseV0"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "destroy-squid-version": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                squid: string;
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidResponseV0"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "restart-squid-version": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                squid: string;
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeployResponseV0"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "hibernate-squid": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                squid: string;
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeployResponseV0"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "daily-requests": {
        parameters: {
            query: {
                organization?: string;
                from: string;
                to: string;
            };
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["IngressRequestsMetric"][];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "daily-requests": {
        parameters: {
            query: {
                organization?: string;
                from: string;
                to: string;
            };
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["IngressRequestsMetric"][];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "ingress-stats": {
        parameters: {
            query: {
                organization?: string;
                from: string;
                to: string;
            };
            header?: never;
            path: {
                code: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["IngressSquidRequestsMetric"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "ingress-stats": {
        parameters: {
            query: {
                organization?: string;
                from: string;
                to: string;
            };
            header?: never;
            path: {
                code: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["IngressSquidRequestsMetric"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    usage: {
        parameters: {
            query: {
                organization?: string;
                from: string;
                to: string;
            };
            header?: never;
            path: {
                code: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidUsageMetric"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    usage: {
        parameters: {
            query: {
                organization?: string;
                from: string;
                to: string;
            };
            header?: never;
            path: {
                code: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidUsageMetric"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "fetch-logs-history": {
        parameters: {
            query: {
                level?: PathsOrgsCodeSquidsSquidNameVersionsVersionNameLogsHistoryGetParametersQueryLevel[];
                container?: string[];
                search?: string;
                nextPage?: string;
                from: string;
                limit?: number;
            };
            header?: never;
            path: {
                code: string;
                squidName: string;
                versionName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SquidHistoryLogsResponse"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "tail-logs": {
        parameters: {
            query?: {
                level?: PathsOrgsCodeSquidsSquidNameVersionsVersionNameLogsFollowGetParametersQueryLevel[];
                container?: string[];
                search?: string;
            };
            header?: never;
            path: {
                code: string;
                squidName: string;
                versionName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    squid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                squid: string;
                version: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    allowedOrigins?: string[];
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidResponseV0"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "upload-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UploadUrlResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "upload-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UploadUrlResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-all": {
        parameters: {
            query?: {
                squidId?: number;
                statusGroup?: PathsOrgsCodeDeploysGetParametersQueryStatusGroup;
            };
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeployResponseV0"][];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-one": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeployResponseV0"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-all": {
        parameters: {
            query?: {
                squidId?: number;
                statusGroup?: PathsV1OrgsCodeDeploysGetParametersQueryStatusGroup;
            };
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeployResponse"][];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-one": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeployResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "deploy-squid": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    hardReset?: boolean;
                    artifactUrl: string;
                    /** @default squid.yaml */
                    manifestPath?: string;
                    updateSlot?: string;
                    tag?: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeployResponse"][];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "list-squids": {
        parameters: {
            query?: {
                search?: string;
                organization?: string;
            };
            header?: never;
            path: {
                org: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidResponse"][];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "list-squids": {
        parameters: {
            query?: {
                search?: string;
                organization?: string;
            };
            header?: never;
            path: {
                org: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidResponse"][];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-squid": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: string;
                squid: string;
                slot: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "delete-squid": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: string;
                squid: string;
                slot: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeployResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "restart-squid": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: string;
                squid: string;
                slot: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeployResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "hibernate-squid": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: string;
                squid: string;
                slot: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeployResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "tag-squid": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: string;
                squid: string;
                slot: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    tag: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeployResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "fetch-logs-history": {
        parameters: {
            query: {
                level?: PathsOrgsCodeSquidsSquidSlotsSlotLogsHistoryGetParametersQueryLevel[];
                container?: string[];
                search?: string;
                nextPage?: string;
                from: string;
                limit?: number;
            };
            header?: never;
            path: {
                code: string;
                squid: string;
                slot: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidHistoryLogsResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "fetch-logs-history": {
        parameters: {
            query: {
                level?: PathsV1OrgsCodeSquidsSquidSlotsSlotLogsHistoryGetParametersQueryLevel[];
                container?: string[];
                search?: string;
                nextPage?: string;
                from: string;
                limit?: number;
            };
            header?: never;
            path: {
                code: string;
                squid: string;
                slot: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidHistoryLogsResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "tail-logs": {
        parameters: {
            query?: {
                level?: PathsOrgsCodeSquidsSquidSlotsSlotLogsFollowGetParametersQueryLevel[];
                container?: string[];
                search?: string;
            };
            header?: never;
            path: {
                code: string;
                squid: string;
                slot: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "tail-logs": {
        parameters: {
            query?: {
                level?: PathsV1OrgsCodeSquidsSquidSlotsSlotLogsFollowGetParametersQueryLevel[];
                container?: string[];
                search?: string;
            };
            header?: never;
            path: {
                code: string;
                squid: string;
                slot: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UserResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "update-profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    fullName: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UserResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UserResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "update-profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    fullName: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UserResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "on-boarding-form": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    policyAccepted?: boolean;
                    subscribeNewsletter?: boolean;
                    onboardingForm?: {
                        occupation: string;
                        source: string;
                        usage: string;
                    };
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UserResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "on-boarding-form": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    policyAccepted?: boolean;
                    subscribeNewsletter?: boolean;
                    onboardingForm?: {
                        occupation: string;
                        source: string;
                        usage: string;
                    };
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UserResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    oldPassword: string;
                    newPassword: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UserResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    oldPassword: string;
                    newPassword: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UserResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "resend-coinlist-email-confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: email */
                    coinlistEmail: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UserResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "resend-coinlist-email-confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: email */
                    coinlistEmail: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UserResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "resend-email-confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UserResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "resend-email-confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UserResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    key: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["KeyResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    key: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["KeyResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UserInviteResponse"][];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UserInviteResponse"][];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-squids-v-0": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidResponseV0"][];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-squids-v-1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidResponse"][];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UserTokenResponse"][];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UserTokenResponse"][];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["ApiTokenResponse"][];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "create-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    /** Format: date-time */
                    expiresAt?: string | null;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["ApiTokenResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["ApiTokenResponse"][];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "create-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    /** Format: date-time */
                    expiresAt?: string | null;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["ApiTokenResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "deactivate-token": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["ApiTokenResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "deactivate-token": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["ApiTokenResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "list-organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"][];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    code: string;
                    name: string;
                    /** Format: email */
                    email: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "list-organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"][];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    code: string;
                    name: string;
                    /** Format: email */
                    email: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "list-organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"][];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    code: string;
                    name: string;
                    /** Format: email */
                    email: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "list-organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"][];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    code: string;
                    name: string;
                    /** Format: email */
                    email: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-organization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-organization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-organization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-organization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    edit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    /** Format: email */
                    email: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "delete-one": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
        };
    };
    edit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    /** Format: email */
                    email: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "delete-one": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
        };
    };
    edit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    /** Format: email */
                    email: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "delete-one": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
        };
    };
    edit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    /** Format: email */
                    email: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "delete-one": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
        };
    };
    "send-email-verification": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                };
            };
        };
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "send-email-verification": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                };
            };
        };
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "send-email-verification": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                };
            };
        };
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "send-email-verification": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                };
            };
        };
        responses: {
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "verify-email": {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "verify-email": {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "verify-email": {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "verify-email": {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-one": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"][];
                    };
                };
            };
        };
    };
    "add-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                    /** @enum {string} */
                    roleType: PathsOrganizationsCodeRolesPostRequestBodyApplicationJsonRoleType;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    "get-one": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"][];
                    };
                };
            };
        };
    };
    "add-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                    /** @enum {string} */
                    roleType: PathsOrgsCodeRolesPostRequestBodyApplicationJsonRoleType;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    "get-one": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"][];
                    };
                };
            };
        };
    };
    "add-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                    /** @enum {string} */
                    roleType: PathsV1OrganizationsCodeRolesPostRequestBodyApplicationJsonRoleType;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    "get-one": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"][];
                    };
                };
            };
        };
    };
    "add-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                    /** @enum {string} */
                    roleType: PathsV1OrgsCodeRolesPostRequestBodyApplicationJsonRoleType;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    "edit-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    roleType: PathsOrganizationsCodeRolesIdPutRequestBodyApplicationJsonRoleType;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    "delete-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"];
                    };
                };
            };
        };
    };
    "edit-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    roleType: PathsOrgsCodeRolesIdPutRequestBodyApplicationJsonRoleType;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    "delete-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"];
                    };
                };
            };
        };
    };
    "edit-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    roleType: PathsV1OrganizationsCodeRolesIdPutRequestBodyApplicationJsonRoleType;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    "delete-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"];
                    };
                };
            };
        };
    };
    "edit-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    roleType: PathsV1OrgsCodeRolesIdPutRequestBodyApplicationJsonRoleType;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
        };
    };
    "delete-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"];
                    };
                };
            };
        };
    };
    "accept-user-role": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
        };
    };
    "accept-user-role": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
        };
    };
    "accept-user-role": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
        };
    };
    "accept-user-role": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
        };
    };
    "decline-user-role": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
        };
    };
    "decline-user-role": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
        };
    };
    "decline-user-role": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
        };
    };
    "decline-user-role": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
        };
    };
    "get-settings": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "setup-intent": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    /** Format: email */
                    email: string;
                    country: string;
                    addressLine1: string;
                    city: string;
                    postalCode: string;
                    vatId?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-settings": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "setup-intent": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    /** Format: email */
                    email: string;
                    country: string;
                    addressLine1: string;
                    city: string;
                    postalCode: string;
                    vatId?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-monthly": {
        parameters: {
            query: {
                bySquid: string;
            };
            header?: never;
            path: {
                code: string;
                year: string;
                month: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"][];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-monthly": {
        parameters: {
            query: {
                bySquid: string;
            };
            header?: never;
            path: {
                code: string;
                year: string;
                month: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"][];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "list-secrets": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SecretsResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    organization?: string;
                    secrets: {
                        name: string;
                        /** @enum {string} */
                        action: PathsOrgsCodeSecretsPutRequestBodyApplicationJsonSecretsAction;
                        value?: string & unknown;
                    }[];
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SecretsResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "list-secrets": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SecretsResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    organization?: string;
                    secrets: {
                        name: string;
                        /** @enum {string} */
                        action: PathsV1OrgsCodeSecretsPutRequestBodyApplicationJsonSecretsAction;
                        value?: string & unknown;
                    }[];
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SecretsResponse"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "list-chains": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["ChainResponse"][];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "list-chains": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["ChainResponse"][];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-token": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["TokenResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "refresh-token": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["TokenResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "get-token": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["TokenResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "refresh-token": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["TokenResponse"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["QuotaResponse"][];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["QuotaResponse"][];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    squids: {
        parameters: {
            query: {
                from: string;
                to: string;
            };
            header?: never;
            path: {
                code: string;
                query: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["MetricResponse"][];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    squids: {
        parameters: {
            query: {
                from: string;
                to: string;
            };
            header?: never;
            path: {
                code: string;
                query: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["MetricResponse"][];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        invalidFields?: {
                            message?: string;
                            path?: string[];
                            type?: string;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "squids-all-prom": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    "squids-all-prom": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
}
export enum PathsOrgsCodeSquidsSquidNameVersionsVersionNameLogsHistoryGetParametersQueryLevel {
    ERROR = "ERROR",
    DEBUG = "DEBUG",
    INFO = "INFO",
    NOTICE = "NOTICE",
    WARNING = "WARNING",
    CRITICAL = "CRITICAL"
}
export enum PathsOrgsCodeSquidsSquidNameVersionsVersionNameLogsFollowGetParametersQueryLevel {
    ERROR = "ERROR",
    DEBUG = "DEBUG",
    INFO = "INFO",
    NOTICE = "NOTICE",
    WARNING = "WARNING",
    CRITICAL = "CRITICAL"
}
export enum PathsOrgsCodeDeploysGetParametersQueryStatusGroup {
    IN_PROGRESS = "IN_PROGRESS"
}
export enum PathsV1OrgsCodeDeploysGetParametersQueryStatusGroup {
    IN_PROGRESS = "IN_PROGRESS"
}
export enum PathsOrgsCodeSquidsSquidSlotsSlotLogsHistoryGetParametersQueryLevel {
    ERROR = "ERROR",
    DEBUG = "DEBUG",
    INFO = "INFO",
    NOTICE = "NOTICE",
    WARNING = "WARNING",
    CRITICAL = "CRITICAL"
}
export enum PathsV1OrgsCodeSquidsSquidSlotsSlotLogsHistoryGetParametersQueryLevel {
    ERROR = "ERROR",
    DEBUG = "DEBUG",
    INFO = "INFO",
    NOTICE = "NOTICE",
    WARNING = "WARNING",
    CRITICAL = "CRITICAL"
}
export enum PathsOrgsCodeSquidsSquidSlotsSlotLogsFollowGetParametersQueryLevel {
    ERROR = "ERROR",
    DEBUG = "DEBUG",
    INFO = "INFO",
    NOTICE = "NOTICE",
    WARNING = "WARNING",
    CRITICAL = "CRITICAL"
}
export enum PathsV1OrgsCodeSquidsSquidSlotsSlotLogsFollowGetParametersQueryLevel {
    ERROR = "ERROR",
    DEBUG = "DEBUG",
    INFO = "INFO",
    NOTICE = "NOTICE",
    WARNING = "WARNING",
    CRITICAL = "CRITICAL"
}
export enum PathsOrganizationsCodeRolesPostRequestBodyApplicationJsonRoleType {
    admin = "admin",
    developer = "developer"
}
export enum PathsOrgsCodeRolesPostRequestBodyApplicationJsonRoleType {
    admin = "admin",
    developer = "developer"
}
export enum PathsV1OrganizationsCodeRolesPostRequestBodyApplicationJsonRoleType {
    admin = "admin",
    developer = "developer"
}
export enum PathsV1OrgsCodeRolesPostRequestBodyApplicationJsonRoleType {
    admin = "admin",
    developer = "developer"
}
export enum PathsOrganizationsCodeRolesIdPutRequestBodyApplicationJsonRoleType {
    admin = "admin",
    developer = "developer"
}
export enum PathsOrgsCodeRolesIdPutRequestBodyApplicationJsonRoleType {
    admin = "admin",
    developer = "developer"
}
export enum PathsV1OrganizationsCodeRolesIdPutRequestBodyApplicationJsonRoleType {
    admin = "admin",
    developer = "developer"
}
export enum PathsV1OrgsCodeRolesIdPutRequestBodyApplicationJsonRoleType {
    admin = "admin",
    developer = "developer"
}
export enum PathsOrgsCodeSecretsPutRequestBodyApplicationJsonSecretsAction {
    UPDATE = "UPDATE",
    DELETE = "DELETE"
}
export enum PathsV1OrgsCodeSecretsPutRequestBodyApplicationJsonSecretsAction {
    UPDATE = "UPDATE",
    DELETE = "DELETE"
}
export enum DeployResponseV0Type {
    DEPLOY = "DEPLOY",
    DEPLOY_HARD_RESET = "DEPLOY_HARD_RESET",
    RESTART = "RESTART",
    HIBERNATE = "HIBERNATE",
    DELETE = "DELETE",
    SCALE = "SCALE",
    TAG = "TAG"
}
export enum DeployResponseV0Status {
    UNPACKING = "UNPACKING",
    IMAGE_BUILDING = "IMAGE_BUILDING",
    RESETTING = "RESETTING",
    TAGGING = "TAGGING",
    SQUID_SYNCING = "SQUID_SYNCING",
    SQUID_DELETING = "SQUID_DELETING",
    ADDONS_SYNCING = "ADDONS_SYNCING",
    ADDONS_DELETING = "ADDONS_DELETING",
    OK = "OK",
    DEPLOYING = "DEPLOYING"
}
export enum DeployResponseV0Failed {
    NO = "NO",
    UNEXPECTED = "UNEXPECTED",
    PERMISSIONS = "PERMISSIONS",
    REQUIREMENTS = "REQUIREMENTS",
    REQUIRED_SOURCE_FILE_MISSED = "REQUIRED_SOURCE_FILE_MISSED",
    REQUIRED_SOURCE_FILE_INVALID = "REQUIRED_SOURCE_FILE_INVALID",
    SOURCE_FILES_BUILD_FAILED = "SOURCE_FILES_BUILD_FAILED"
}
export enum SquidApiResponseV0Status {
    AVAILABLE = "AVAILABLE",
    NOT_AVAILABLE = "NOT_AVAILABLE"
}
export enum SquidProcessorResponseV0Status {
    SYNCING = "SYNCING",
    UNKNOWN = "UNKNOWN",
    STARTING = "STARTING",
    SYNCED = "SYNCED",
    STUCK = "STUCK"
}
export enum SquidDiskResponseV0UsageStatus {
    LOW = "LOW",
    NORMAL = "NORMAL",
    WARNING = "WARNING",
    CRITICAL = "CRITICAL",
    UNKNOWN = "UNKNOWN"
}
export enum SquidLastDeployV0Type {
    DEPLOY = "DEPLOY",
    DEPLOY_HARD_RESET = "DEPLOY_HARD_RESET",
    RESTART = "RESTART",
    HIBERNATE = "HIBERNATE",
    DELETE = "DELETE",
    SCALE = "SCALE",
    TAG = "TAG"
}
export enum SquidLastDeployV0Status {
    UNPACKING = "UNPACKING",
    IMAGE_BUILDING = "IMAGE_BUILDING",
    RESETTING = "RESETTING",
    TAGGING = "TAGGING",
    SQUID_SYNCING = "SQUID_SYNCING",
    SQUID_DELETING = "SQUID_DELETING",
    ADDONS_SYNCING = "ADDONS_SYNCING",
    ADDONS_DELETING = "ADDONS_DELETING",
    OK = "OK",
    DEPLOYING = "DEPLOYING"
}
export enum SquidLastDeployV0Failed {
    NO = "NO",
    UNEXPECTED = "UNEXPECTED",
    PERMISSIONS = "PERMISSIONS",
    REQUIREMENTS = "REQUIREMENTS",
    REQUIRED_SOURCE_FILE_MISSED = "REQUIRED_SOURCE_FILE_MISSED",
    REQUIRED_SOURCE_FILE_INVALID = "REQUIRED_SOURCE_FILE_INVALID",
    SOURCE_FILES_BUILD_FAILED = "SOURCE_FILES_BUILD_FAILED"
}
export enum SquidRunningDeployV0Type {
    DEPLOY = "DEPLOY",
    DEPLOY_HARD_RESET = "DEPLOY_HARD_RESET",
    RESTART = "RESTART",
    HIBERNATE = "HIBERNATE",
    DELETE = "DELETE",
    SCALE = "SCALE",
    TAG = "TAG"
}
export enum VersionResponseV0Status {
    DEPLOYING = "DEPLOYING",
    DEPLOY_ERROR = "DEPLOY_ERROR",
    DEPLOYED = "DEPLOYED",
    HIBERNATED = "HIBERNATED"
}
export enum IngressRequestsMetricRes {
    error = "error",
    success = "success"
}
export enum IngressSquidRequestsMetricTimeGroup {
    Minute = "Minute",
    Hour = "Hour",
    Day = "Day",
    Month = "Month"
}
export enum SquidUsageMetricTimeGroup {
    Minute = "Minute",
    Hour = "Hour",
    Day = "Day",
    Month = "Month"
}
export enum DeployResponseType {
    DEPLOY = "DEPLOY",
    DEPLOY_HARD_RESET = "DEPLOY_HARD_RESET",
    RESTART = "RESTART",
    HIBERNATE = "HIBERNATE",
    DELETE = "DELETE",
    SCALE = "SCALE",
    TAG = "TAG"
}
export enum DeployResponseStatus {
    UNPACKING = "UNPACKING",
    IMAGE_BUILDING = "IMAGE_BUILDING",
    RESETTING = "RESETTING",
    TAGGING = "TAGGING",
    SQUID_SYNCING = "SQUID_SYNCING",
    SQUID_DELETING = "SQUID_DELETING",
    ADDONS_SYNCING = "ADDONS_SYNCING",
    ADDONS_DELETING = "ADDONS_DELETING",
    OK = "OK",
    DEPLOYING = "DEPLOYING"
}
export enum DeployResponseFailed {
    NO = "NO",
    UNEXPECTED = "UNEXPECTED",
    PERMISSIONS = "PERMISSIONS",
    REQUIREMENTS = "REQUIREMENTS",
    REQUIRED_SOURCE_FILE_MISSED = "REQUIRED_SOURCE_FILE_MISSED",
    REQUIRED_SOURCE_FILE_INVALID = "REQUIRED_SOURCE_FILE_INVALID",
    SOURCE_FILES_BUILD_FAILED = "SOURCE_FILES_BUILD_FAILED"
}
export enum SquidApiResponseStatus {
    AVAILABLE = "AVAILABLE",
    NOT_AVAILABLE = "NOT_AVAILABLE"
}
export enum SquidProcessorResponseStatus {
    SYNCING = "SYNCING",
    UNKNOWN = "UNKNOWN",
    STARTING = "STARTING",
    SYNCED = "SYNCED",
    STUCK = "STUCK"
}
export enum SquidDiskResponseUsageStatus {
    LOW = "LOW",
    NORMAL = "NORMAL",
    WARNING = "WARNING",
    CRITICAL = "CRITICAL",
    UNKNOWN = "UNKNOWN"
}
export enum SquidLastDeployType {
    DEPLOY = "DEPLOY",
    DEPLOY_HARD_RESET = "DEPLOY_HARD_RESET",
    RESTART = "RESTART",
    HIBERNATE = "HIBERNATE",
    DELETE = "DELETE",
    SCALE = "SCALE",
    TAG = "TAG"
}
export enum SquidLastDeployStatus {
    UNPACKING = "UNPACKING",
    IMAGE_BUILDING = "IMAGE_BUILDING",
    RESETTING = "RESETTING",
    TAGGING = "TAGGING",
    SQUID_SYNCING = "SQUID_SYNCING",
    SQUID_DELETING = "SQUID_DELETING",
    ADDONS_SYNCING = "ADDONS_SYNCING",
    ADDONS_DELETING = "ADDONS_DELETING",
    OK = "OK",
    DEPLOYING = "DEPLOYING"
}
export enum SquidLastDeployFailed {
    NO = "NO",
    UNEXPECTED = "UNEXPECTED",
    PERMISSIONS = "PERMISSIONS",
    REQUIREMENTS = "REQUIREMENTS",
    REQUIRED_SOURCE_FILE_MISSED = "REQUIRED_SOURCE_FILE_MISSED",
    REQUIRED_SOURCE_FILE_INVALID = "REQUIRED_SOURCE_FILE_INVALID",
    SOURCE_FILES_BUILD_FAILED = "SOURCE_FILES_BUILD_FAILED"
}
export enum SquidResponseStatus {
    DEPLOYING = "DEPLOYING",
    DEPLOY_ERROR = "DEPLOY_ERROR",
    DEPLOYED = "DEPLOYED",
    HIBERNATED = "HIBERNATED"
}
export enum OrganizationResponseStatus {
    DRAFT = "DRAFT",
    ACTIVE = "ACTIVE",
    IN_DEBT = "IN_DEBT",
    TERMINATED = "TERMINATED",
    PAYMENT_ISSUES = "PAYMENT_ISSUES"
}
export enum OrganizationRoleResponseStatus {
    accepted = "accepted",
    invited = "invited"
}
export enum ChainResponseType {
    evm = "evm",
    substrate = "substrate"
}
export enum QuotaResponseId {
    rpc = "rpc"
}
