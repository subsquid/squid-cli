/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/orgs/{code}/metrics/ingress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all requests count */
        get: operations["SquidMetricsController_dailyRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/metrics/ingress/{squid_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get full squid ingress metrics */
        get: operations["SquidMetricsController_ingressStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/metrics/usage/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get squid usage metrics */
        get: operations["SquidMetricsController_usage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/deployments/upload-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create an upload url */
        post: operations["DeploymentController_uploadUrl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/deployments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get deployments */
        get: operations["DeploymentController_getAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/deployments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a deployment */
        get: operations["DeploymentController_getOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{org}/squids/deploy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deploy a squid */
        post: operations["SquidController_deploySquid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{org}/squids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List squids */
        get: operations["SquidController_listSquids"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{org}/squids/{reference}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a squid */
        get: operations["SquidController_getSquid"];
        put?: never;
        post?: never;
        /** Delete a squid */
        delete: operations["SquidController_deleteSquid"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{org}/squids/{reference}/restart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restart a squid */
        post: operations["SquidController_restartSquid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{org}/squids/{reference}/hibernate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Hibernate a squid */
        post: operations["SquidController_hibernateSquid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{org}/squids/{reference}/tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Assign tag to a squid  */
        post: operations["SquidController_setTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/squids/{reference}/logs/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch squid logs */
        get: operations["SquidLogsController_fetchLogsHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/squids/{reference}/logs/follow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Stream squid logs */
        get: operations["SquidLogsController_tailLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get profile */
        get: operations["UserController_getProfile"];
        /** Update profile */
        put: operations["UserController_updateProfile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/squids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of squids from all users organizations */
        get: operations["UserController_getSquidsV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all organizations */
        get: operations["OrganizationController_listOrganizations"];
        put?: never;
        /** Create new organization */
        post: operations["OrganizationController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{org}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an organization */
        get: operations["OrganizationController_getOrganization"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit an organization */
        put: operations["OrganizationController_edit"];
        post?: never;
        /** Delete an organization */
        delete: operations["OrganizationController_deleteOne"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/send-verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send verification email */
        post: operations["OrganizationController_sendEmailVerification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Verify organization email by token */
        get: operations["OrganizationController_verifyEmail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user roles */
        get: operations["OrganizationController_getOne"];
        put?: never;
        /** Add user role */
        post: operations["OrganizationController_addUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit user role */
        put: operations["OrganizationController_editUser"];
        post?: never;
        /** Remove user role */
        delete: operations["OrganizationController_deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/roles/{id}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accept user role */
        post: operations["OrganizationController_acceptUserRole"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/roles/{id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reject user role */
        post: operations["OrganizationController_declineUserRole"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/integrations/neon": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Setup Neon API integration */
        put: operations["OrganizationController_setNeonApiToken"];
        post?: never;
        /** Delete Neon integration */
        delete: operations["OrganizationController_deleteNeonApiToken"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/billing/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get billing settings */
        get: operations["OrganizationBillingController_getSettings"];
        /** Update billing settings */
        put: operations["OrganizationBillingController_setupIntent"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/billing/receipts/{year}/{month}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get billing month usage total */
        get: operations["OrganizationBillingController_getMonthly"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List secrets */
        get: operations["SecretController_listSecrets"];
        /** Update secrets */
        put: operations["SecretController_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/rpc/chains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List chains */
        get: operations["RpcController_listChains"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/rpc/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get organization token */
        get: operations["RpcController_getToken"];
        put?: never;
        /** Refresh organization token */
        post: operations["RpcController_refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/quotas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get quotas */
        get: operations["QuotaController_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/monitoring/squids/{query}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get squids metric */
        get: operations["MonitoringController_squids"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orgs/{code}/monitoring/squids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Scrape metrics */
        get: operations["MonitoringController_squidsAllProm"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UnauthorizedResponse: {
            /** @example CREDENTIALS_INVALID */
            error: string;
        };
        IngressRequestsMetric: {
            /** Format: date-time */
            time: string;
            squidId: number;
            /** @enum {string} */
            res: IngressRequestsMetricRes;
        };
        IngressSquidLatency: {
            p50: number;
            p90: number;
            p95: number;
            p99: number;
        };
        IngressSquidRequestsStat: {
            count: string;
            bytesSend: string;
            latency: components["schemas"]["IngressSquidLatency"];
        };
        IngressSquidRequestsMetricValue: {
            /** Format: date-time */
            ts: string;
            success: components["schemas"]["IngressSquidRequestsStat"];
            error: components["schemas"]["IngressSquidRequestsStat"];
        };
        IngressSquidRequestsMetric: {
            /** @enum {string} */
            timeGroup: IngressSquidRequestsMetricTimeGroup;
            metrics: components["schemas"]["IngressSquidRequestsMetricValue"][];
        };
        SquidUsageMetricValue: {
            /** Format: date-time */
            ts: string;
            apiCpuUsage: number;
            apiCpuRequested: number;
            apiMemUsageMb: number;
            apiMemRequestedMb: number;
            processorCpuUsage: number;
            processorCpuRequested: number;
            processorMemUsageMb: number;
            processorMemRequestedMb: number;
            dbCpuUsage: number;
            dbCpuRequested: number;
            dbDiskUsageMb: number;
            dbDiskRequestedMb: number;
        };
        SquidUsageMetric: {
            /** @enum {string} */
            timeGroup: SquidUsageMetricTimeGroup;
            metrics: components["schemas"]["SquidUsageMetricValue"][];
        };
        UploadUrlResponse: {
            uploadUrl: string;
            uploadFields: Record<string, unknown>;
            fileUrl: string;
            maxUploadBytes: number;
        };
        DeployLog: {
            severity: string;
            message: string;
        };
        DeploymentOrganizationResponse: {
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            id: string;
            /** @example Subsquid GmbH */
            name: string;
            /** @example subsquid-org */
            code: string;
        };
        DeployUserResponse: {
            /** @example 90046784-ef9a-42b4-9dcf-ca4e4ed2cf4a */
            id: string;
            /** @example user@gmail.com */
            email: string;
            /** @example John Doe */
            fullName: string;
        };
        DeploymentSquidResponse: {
            /** @example 1 */
            id: number;
            /** @example my-squid */
            name: string;
            /** @example abc12 */
            hash: string;
            /** @example my-squid:abc12 */
            reference: string;
        };
        DeploymentOptionsResponse: {
            /** @example dev */
            tag: string;
            /** @example false */
            hardReset: boolean;
        };
        DeploymentResponse: {
            id: number;
            /** @enum {string} */
            type: DeploymentResponseType;
            /** @enum {string} */
            status: DeploymentResponseStatus;
            /** @enum {string} */
            failed: DeploymentResponseFailed;
            logs: components["schemas"]["DeployLog"][];
            organization: components["schemas"]["DeploymentOrganizationResponse"];
            user: components["schemas"]["DeployUserResponse"] | null;
            squid: components["schemas"]["DeploymentSquidResponse"] | null;
            options: components["schemas"]["DeploymentOptionsResponse"];
            /**
             * @description Total elapsed time in milliseconds
             * @example 50379
             */
            totalElapsedTimeMs: number;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            createdAt: string;
        };
        SquidTagResponse: {
            /** @example prod */
            name: string;
        };
        Manifest: Record<string, unknown>;
        SquidManifestResponse: {
            /** @description The actual squid manifest */
            current: components["schemas"]["Manifest"];
            /** @description The unmodified squid manifest */
            raw: string;
        };
        SquidUrlResponse: {
            /** @example tag */
            type: string;
            /** @example prod */
            name?: string;
            /** @example https://squid.subsquid.io/mysquid/-/a1b2c3/ */
            url: string;
        };
        SquidApiResponse: {
            /** @enum {string} */
            status: SquidApiResponseStatus;
            urls: components["schemas"]["SquidUrlResponse"][];
        };
        SquidSyncStatusResponse: {
            /** @example 1 */
            totalBlocks: number;
            /** @example 1 */
            currentBlock: number;
        };
        SquidProcessorResponse: {
            /** @example processor */
            name: string;
            /** @enum {string} */
            status: SquidProcessorResponseStatus;
            syncState: components["schemas"]["SquidSyncStatusResponse"];
            metrics: string;
        };
        SquidAddonsHasuraResponse: {
            replicas: number;
            profile: string;
            /** @enum {string} */
            status: SquidAddonsHasuraResponseStatus;
            urls: components["schemas"]["SquidUrlResponse"][];
        };
        PostgresConnectionParams: {
            /** @example pg.sqd.dev */
            host: string;
            /** @example owner */
            user: string;
            /** @example dbname */
            database: string;
            /** @example random_password */
            password: string;
        };
        PostgresConnection: {
            /** @example postgresql://user:password@host/db?sslmode=require */
            uri: string;
            params: components["schemas"]["PostgresConnectionParams"];
        };
        SquidDiskResponse: {
            /** @enum {string} */
            usageStatus: SquidDiskResponseUsageStatus;
            usedBytes: number;
            totalBytes: number;
        };
        SquidAddonsPostgresResponse: {
            connections: components["schemas"]["PostgresConnection"][];
            disk: components["schemas"]["SquidDiskResponse"];
        };
        SquidAddonsNeonResponse: {
            connections: components["schemas"]["PostgresConnection"][];
        };
        SquidAddonsResponse: {
            hasura?: components["schemas"]["SquidAddonsHasuraResponse"];
            postgres?: components["schemas"]["SquidAddonsPostgresResponse"];
            neon?: components["schemas"]["SquidAddonsNeonResponse"];
        };
        SquidLastDeploy: {
            /** @example 123 */
            id: number;
            /**
             * @example DEPLOY
             * @enum {string}
             */
            type: SquidLastDeployType;
            /**
             * @example UNPACKING
             * @enum {string}
             */
            status: SquidLastDeployStatus;
            /**
             * @example NO
             * @enum {string}
             */
            failed: SquidLastDeployFailed;
            /** @example true */
            running: boolean;
        };
        SquidOrganizationResponse: {
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            id: string;
            /** @example Subsquid GmbH */
            name: string;
            /** @example subsquid-org */
            code: string;
        };
        SquidLinks: {
            /** @description https://cloud.sqd.dev/squids/test/76zvzw */
            cloudUrl: string;
            /** @description eu.gcr.io/bright-meridian-316511/test-13484-76zvzw:8ba4f6c0ad1eb097de435d5458c5365d447fe481 */
            dockerImageUrl: string;
        };
        SquidResponse: {
            /** @example 123 */
            id: number;
            /** @example my-squid */
            name: string;
            /** @example my-squid:4fush9 */
            reference: string;
            /** @example 4fush9 */
            hash: string;
            description?: string | null;
            tags: components["schemas"]["SquidTagResponse"][];
            manifest: components["schemas"]["SquidManifestResponse"];
            /** @description The package.json found in source code */
            packageJson: Record<string, unknown>;
            api?: components["schemas"]["SquidApiResponse"];
            processors?: components["schemas"]["SquidProcessorResponse"][];
            addons?: components["schemas"]["SquidAddonsResponse"];
            spec: number;
            lastDeploy?: components["schemas"]["SquidLastDeploy"];
            /** @enum {string} */
            status?: SquidResponseStatus;
            organization: components["schemas"]["SquidOrganizationResponse"];
            /**
             * Format: date-time
             * @example 2025-01-01T00:00:00.000Z
             */
            hibernatedAt?: string;
            /**
             * Format: date-time
             * @example 2025-01-01T00:00:00.000Z
             */
            deployedAt?: string;
            links: components["schemas"]["SquidLinks"];
            /**
             * Format: date-time
             * @example 2025-01-01T00:00:00.000Z
             */
            createdAt: string;
        };
        SquidLogResponse: {
            id: string | null;
            /** Format: date-time */
            timestamp: string | null;
            container: string;
            level: string;
            payload: Record<string, unknown>;
        };
        SquidHistoryLogsResponse: {
            logs: components["schemas"]["SquidLogResponse"][];
            nextPage: string | null;
        };
        NotificationEmailResponse: {
            /** @example current@example.com */
            email: string;
            /** @example new@example.com */
            pendingEmail: string;
        };
        OrganizationLimitsResponse: {
            /** @example 3 */
            squids: number;
            /** @example false */
            playground: boolean;
        };
        OrganizationBillingsDetails: {
            /** @example John Doe */
            name: string;
            /** @example Subsquid */
            company: string;
            /** @example billing@subsquid.io */
            email: string;
            /** @example Mythenquai 2 */
            addressLine1: string;
            /** @example Zurich */
            city: string;
            /** @example 10004 */
            zipCode: string;
        };
        OrganizationIntegrationsNeon: {
            apiTokenMasked: string;
        };
        OrganizationIntegrations: {
            neon: components["schemas"]["OrganizationIntegrationsNeon"];
        };
        OrganizationResponse: {
            /** @example org_DI4wZx0FAJa93tq3iNr1wc7H */
            id: string;
            /** @example organization_unique_code */
            code: string;
            /** @example My first organization */
            name: string;
            email: components["schemas"]["NotificationEmailResponse"];
            /** @example admin */
            roleType: string;
            /**
             * @example ACTIVE
             * @enum {string}
             */
            status: OrganizationResponseStatus;
            limits: components["schemas"]["OrganizationLimitsResponse"];
            billingDetails: components["schemas"]["OrganizationBillingsDetails"];
            integrations: components["schemas"]["OrganizationIntegrations"];
        };
        UserResponse: {
            /** @example 90046784-ef9a-42b4-9dcf-ca4e4ed2cf4a */
            id: string;
            /** @example user@gmail.com */
            email: string;
            /** @example John Doe */
            fullName: string;
            /** @example user */
            username: string;
            /** @example https://gravatar.com/1.jpg */
            avatarUrl: string;
            /** @example {
             *       "occupation": "Backend developer",
             *       "source": "Twitter",
             *       "customSource": "",
             *       "usage": "DeFi",
             *       "customUsage": ""
             *     } */
            onboardingForm: Record<string, unknown>;
            /** @example true */
            policyAccepted: boolean;
            /** @example false */
            onboardingFormCompleted: boolean;
            /** @example false */
            emailVerified: boolean;
            organizations?: components["schemas"]["OrganizationResponse"][];
        };
        OrganizationRoleResponse: {
            /** @example 88a02891-c461-4c1b-b705-13c8e6fdf7c0 */
            id: string;
            /** @example test@gmail.com */
            email: string;
            /** @example John Doe */
            fullName: string;
            /** @example admin */
            type: string;
            /**
             * @example accepted
             * @enum {string}
             */
            status: OrganizationRoleResponseStatus;
        };
        SecretsResponse: {
            /** @example {
             *       "MY_SECRET": "VALUE"
             *     } */
            secrets: Record<string, unknown>;
        };
        ChainResponse: {
            /** @example eth */
            id: string;
            /** @example Ethereum */
            title: string;
            /** @example https://cdn.subsquid.io/images/eth.svg */
            iconUrl: string;
            /** @enum {string} */
            type: ChainResponseType;
            /** @example 100000000 */
            requests: string;
            /** @example false */
            testnet: boolean;
            /** @example https://rpc.subsquid.io/eth/{{TOKEN}} */
            url: string;
        };
        TokenResponse: {
            /** @example sqd_prod_g9FsTC9NXkIPLsIJPZq0 */
            token: string;
        };
        QuotaResponse: {
            /** @enum {string} */
            id: QuotaResponseId;
            /** @example 1.00 */
            usage: string;
            /** @example 100.00 */
            capacity: string;
        };
        MetricLabelResponse: {
            container: string;
            squid_id: string;
            squid_name: string;
        };
        MetricResponse: {
            labels: components["schemas"]["MetricLabelResponse"];
            values: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    SquidMetricsController_dailyRequests: {
        parameters: {
            query: {
                organization?: string;
                from: string;
                to: string;
            };
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["IngressRequestsMetric"][];
                    };
                };
            };
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    SquidMetricsController_ingressStats: {
        parameters: {
            query: {
                organization?: string;
                from: string;
                to: string;
            };
            header?: never;
            path: {
                code: string;
                squid_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["IngressSquidRequestsMetric"];
                    };
                };
            };
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    SquidMetricsController_usage: {
        parameters: {
            query: {
                organization?: string;
                from: string;
                to: string;
            };
            header?: never;
            path: {
                code: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidUsageMetric"];
                    };
                };
            };
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    DeploymentController_uploadUrl: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UploadUrlResponse"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    DeploymentController_getAll: {
        parameters: {
            query?: {
                squidId?: number;
                statusGroup?: PathsV1OrgsCodeDeploymentsGetParametersQueryStatusGroup;
            };
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeploymentResponse"][];
                    };
                };
            };
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    DeploymentController_getOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeploymentResponse"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    SquidController_deploySquid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    artifactUrl: string;
                    /** @default squid.yaml */
                    manifestPath?: string;
                    /** @default {} */
                    options?: {
                        updateByHash?: string;
                        hardReset?: boolean;
                        overrideName: string;
                        tag?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeploymentResponse"];
                    };
                };
            };
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    SquidController_listSquids: {
        parameters: {
            query?: {
                search?: string;
                name?: string;
            };
            header?: never;
            path: {
                org: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidResponse"][];
                    };
                };
            };
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    SquidController_getSquid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: string;
                reference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidResponse"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    SquidController_deleteSquid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: string;
                reference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeploymentResponse"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    SquidController_restartSquid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: string;
                reference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeploymentResponse"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    SquidController_hibernateSquid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: string;
                reference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeploymentResponse"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    SquidController_setTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: string;
                reference: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    tag: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["DeploymentResponse"];
                    };
                };
            };
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    SquidLogsController_fetchLogsHistory: {
        parameters: {
            query: {
                level?: PathsV1OrgsCodeSquidsReferenceLogsHistoryGetParametersQueryLevel[];
                container?: string[];
                search?: string;
                nextPage?: string;
                from: string;
                limit?: number;
            };
            header?: never;
            path: {
                code: string;
                reference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidHistoryLogsResponse"];
                    };
                };
            };
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    SquidLogsController_tailLogs: {
        parameters: {
            query?: {
                level?: PathsV1OrgsCodeSquidsReferenceLogsFollowGetParametersQueryLevel[];
                container?: string[];
                search?: string;
            };
            header?: never;
            path: {
                code: string;
                reference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    UserController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UserResponse"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    UserController_updateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    fullName: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["UserResponse"];
                    };
                };
            };
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    UserController_getSquidsV1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SquidResponse"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    OrganizationController_listOrganizations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    OrganizationController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    code: string;
                    name: string;
                    /** Format: email */
                    email: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    OrganizationController_getOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    OrganizationController_edit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    /** Format: email */
                    email: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    OrganizationController_deleteOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
        };
    };
    OrganizationController_sendEmailVerification: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                };
            };
        };
        responses: {
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    OrganizationController_verifyEmail: {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrganizationController_getOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"][];
                    };
                };
            };
        };
    };
    OrganizationController_addUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                    /** @enum {string} */
                    roleType: PathsV1OrgsCodeRolesPostRequestBodyApplicationJsonRoleType;
                };
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"];
                    };
                };
            };
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
        };
    };
    OrganizationController_editUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    roleType: PathsV1OrgsCodeRolesIdPutRequestBodyApplicationJsonRoleType;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"];
                    };
                };
            };
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
        };
    };
    OrganizationController_deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationRoleResponse"];
                    };
                };
            };
        };
    };
    OrganizationController_acceptUserRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
        };
    };
    OrganizationController_declineUserRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
        };
    };
    OrganizationController_setNeonApiToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    token: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
        };
    };
    OrganizationController_deleteNeonApiToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"];
                    };
                };
            };
        };
    };
    OrganizationBillingController_getSettings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    OrganizationBillingController_setupIntent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    /** Format: email */
                    email: string;
                    country: string;
                    addressLine1: string;
                    city: string;
                    postalCode: string;
                    vatId?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    OrganizationBillingController_getMonthly: {
        parameters: {
            query: {
                bySquid: string;
            };
            header?: never;
            path: {
                code: string;
                year: string;
                month: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["OrganizationResponse"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    SecretController_listSecrets: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SecretsResponse"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    SecretController_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    secrets: {
                        name: string;
                        /** @enum {string} */
                        action: PathsV1OrgsCodeSecretsPutRequestBodyApplicationJsonSecretsAction;
                        value?: string & unknown;
                    }[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["SecretsResponse"];
                    };
                };
            };
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    RpcController_listChains: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["ChainResponse"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    RpcController_getToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["TokenResponse"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    RpcController_refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["TokenResponse"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    QuotaController_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["QuotaResponse"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    MonitoringController_squids: {
        parameters: {
            query: {
                from: string;
                to: string;
                maxPoints?: number;
            };
            header?: never;
            path: {
                code: string;
                query: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example null */
                        error?: string;
                        payload?: components["schemas"]["MetricResponse"][];
                    };
                };
            };
            /** @description Bad user input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: string;
                        invalidFields: {
                            message: string;
                            path: string[];
                            type: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
    MonitoringController_squidsAllProm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponse"];
                };
            };
        };
    };
}
export enum PathsV1OrgsCodeDeploymentsGetParametersQueryStatusGroup {
    IN_PROGRESS = "IN_PROGRESS"
}
export enum PathsV1OrgsCodeSquidsReferenceLogsHistoryGetParametersQueryLevel {
    ERROR = "ERROR",
    DEBUG = "DEBUG",
    INFO = "INFO",
    NOTICE = "NOTICE",
    WARNING = "WARNING",
    CRITICAL = "CRITICAL"
}
export enum PathsV1OrgsCodeSquidsReferenceLogsFollowGetParametersQueryLevel {
    ERROR = "ERROR",
    DEBUG = "DEBUG",
    INFO = "INFO",
    NOTICE = "NOTICE",
    WARNING = "WARNING",
    CRITICAL = "CRITICAL"
}
export enum PathsV1OrgsCodeRolesPostRequestBodyApplicationJsonRoleType {
    admin = "admin",
    developer = "developer"
}
export enum PathsV1OrgsCodeRolesIdPutRequestBodyApplicationJsonRoleType {
    admin = "admin",
    developer = "developer"
}
export enum PathsV1OrgsCodeSecretsPutRequestBodyApplicationJsonSecretsAction {
    UPDATE = "UPDATE",
    DELETE = "DELETE"
}
export enum IngressRequestsMetricRes {
    error = "error",
    success = "success"
}
export enum IngressSquidRequestsMetricTimeGroup {
    Minute = "Minute",
    Hour = "Hour",
    Day = "Day",
    Month = "Month"
}
export enum SquidUsageMetricTimeGroup {
    Minute = "Minute",
    Hour = "Hour",
    Day = "Day",
    Month = "Month"
}
export enum DeploymentResponseType {
    DEPLOY = "DEPLOY",
    DEPLOY_HARD_RESET = "DEPLOY_HARD_RESET",
    RESTART = "RESTART",
    HIBERNATE = "HIBERNATE",
    DELETE = "DELETE",
    SCALE = "SCALE",
    SET_TAG = "SET_TAG",
    REMOVE_TAG = "REMOVE_TAG"
}
export enum DeploymentResponseStatus {
    UNPACKING = "UNPACKING",
    IMAGE_BUILDING = "IMAGE_BUILDING",
    RESETTING = "RESETTING",
    CONFIGURING_INGRESS = "CONFIGURING_INGRESS",
    SQUID_SYNCING = "SQUID_SYNCING",
    SQUID_DELETING = "SQUID_DELETING",
    ADDONS_SYNCING = "ADDONS_SYNCING",
    ADDONS_DELETING = "ADDONS_DELETING",
    OK = "OK",
    DEPLOYING = "DEPLOYING"
}
export enum DeploymentResponseFailed {
    NO = "NO",
    UNEXPECTED = "UNEXPECTED",
    PERMISSIONS = "PERMISSIONS",
    REQUIREMENTS = "REQUIREMENTS",
    REQUIRED_SOURCE_FILE_MISSED = "REQUIRED_SOURCE_FILE_MISSED",
    REQUIRED_SOURCE_FILE_INVALID = "REQUIRED_SOURCE_FILE_INVALID",
    SOURCE_FILES_BUILD_FAILED = "SOURCE_FILES_BUILD_FAILED"
}
export enum SquidApiResponseStatus {
    AVAILABLE = "AVAILABLE",
    NOT_AVAILABLE = "NOT_AVAILABLE"
}
export enum SquidProcessorResponseStatus {
    SYNCING = "SYNCING",
    UNKNOWN = "UNKNOWN",
    STARTING = "STARTING",
    SYNCED = "SYNCED"
}
export enum SquidAddonsHasuraResponseStatus {
    AVAILABLE = "AVAILABLE",
    NOT_AVAILABLE = "NOT_AVAILABLE"
}
export enum SquidDiskResponseUsageStatus {
    LOW = "LOW",
    NORMAL = "NORMAL",
    WARNING = "WARNING",
    CRITICAL = "CRITICAL",
    UNKNOWN = "UNKNOWN"
}
export enum SquidLastDeployType {
    DEPLOY = "DEPLOY",
    DEPLOY_HARD_RESET = "DEPLOY_HARD_RESET",
    RESTART = "RESTART",
    HIBERNATE = "HIBERNATE",
    DELETE = "DELETE",
    SCALE = "SCALE",
    SET_TAG = "SET_TAG",
    REMOVE_TAG = "REMOVE_TAG"
}
export enum SquidLastDeployStatus {
    UNPACKING = "UNPACKING",
    IMAGE_BUILDING = "IMAGE_BUILDING",
    RESETTING = "RESETTING",
    CONFIGURING_INGRESS = "CONFIGURING_INGRESS",
    SQUID_SYNCING = "SQUID_SYNCING",
    SQUID_DELETING = "SQUID_DELETING",
    ADDONS_SYNCING = "ADDONS_SYNCING",
    ADDONS_DELETING = "ADDONS_DELETING",
    OK = "OK",
    DEPLOYING = "DEPLOYING"
}
export enum SquidLastDeployFailed {
    NO = "NO",
    UNEXPECTED = "UNEXPECTED",
    PERMISSIONS = "PERMISSIONS",
    REQUIREMENTS = "REQUIREMENTS",
    REQUIRED_SOURCE_FILE_MISSED = "REQUIRED_SOURCE_FILE_MISSED",
    REQUIRED_SOURCE_FILE_INVALID = "REQUIRED_SOURCE_FILE_INVALID",
    SOURCE_FILES_BUILD_FAILED = "SOURCE_FILES_BUILD_FAILED"
}
export enum SquidResponseStatus {
    DEPLOYING = "DEPLOYING",
    DEPLOY_ERROR = "DEPLOY_ERROR",
    DEPLOYED = "DEPLOYED",
    HIBERNATED = "HIBERNATED"
}
export enum OrganizationResponseStatus {
    DRAFT = "DRAFT",
    ACTIVE = "ACTIVE",
    IN_DEBT = "IN_DEBT",
    TERMINATED = "TERMINATED",
    PAYMENT_ISSUES = "PAYMENT_ISSUES"
}
export enum OrganizationRoleResponseStatus {
    accepted = "accepted",
    invited = "invited"
}
export enum ChainResponseType {
    evm = "evm",
    substrate = "substrate"
}
export enum QuotaResponseId {
    rpc = "rpc"
}
